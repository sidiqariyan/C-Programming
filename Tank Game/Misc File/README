TANK WARS v1.0
--------------

Intro:
-----

This game is inspired by the evergreen classic Battle City.
*   There are two Tanks which can move around the Arena, collect
    items and shoot at other destructable objects.
*   There is a Command Base (referred to as Falcon) for each Tank.


Aim:
----

*   The aim of the game is to score maximum points by the end of the
    game. Points can be earned by collecting gold or by killing enemy
    base or enemy tank.
*   Game ends when
    * one of the tanks is killed or
    * the bases is shot down or
    * when the maximum number of moves have been made

How to Get Started:
------------------

    We have done most of the hard work for you guys :P. All you guys
    need to do is just write one function, the brain (or the Decision
    Maker of the Tank as we see it :) ).

    To enable you to get a feel for the game very early, we have a
    pre-played game stored in this folder. Just double-click on the
    tank_video_player.html file and click on play. You can see a
    sample match being played there.

To get started with coding:
---------------------------

    For those who can't wait to get started on their bots, here's the Quick-Start Guide.

    The three important files from the player's perspective are the 
    * DecisionMaker1.cpp
    * Info.h (in the include folder)
    * Info.cpp (in the src folder)

    Decision Maker 

    The participants (players) are required ONLY to modify
    DecisionMaker1.cpp. All your code and supporting functions (if
    any) will go into this file.

    Info file

    You can look at Info.h to understand better the information we
    pass you. You are strongly discouraged to modify any other file
    apart from DecisionMaker1.cpp and you shall be
    disqualified if they are found to have done so.
    
    The information there will help you go beyond the basic functions
    we provide you and implement your very own special
    strategies.

    Then you can start coding by writing the appropriate
    logic of your implementation in the get_player_move () function of
    the DECISIONMAKER Class.

    You can proceed in two ways : 

        * You can directly just look at the various possibilities and 
          code for them so that you take appropriate action

                                OR

        * You can try to build some mathematical model. We have given
          a basic Decision Making framework where you can set values
          for various strategies in a Weightage Table and Difficulty
          Table and calculate the best actions as per those weights.

        Best Mathematical models will be awarded special prizes.
        

How to test your Bots:
---------------------

     After you fill in DecisionMaker1.cpp with your code just use the
     terminal to go to the main directory which contains all these
     folders (especially the Makefile). You will find that we have
     already filled in default code for DecisionMaker2.cpp so that you
     can test your bot against it on your computer.

     Now, execute the following commands in order:

	make play

     This will literally 'play' the game with your DecisionMaker1 code controlling Tank 1 and DecisionMaker2 code controlling Tank 2

	make display

     This will open the match just played in Firefox. Just click on
     Play to see the match. Alternatively, open the game_display.html
     file manually in your favourite browser.

How to submit your bot:
-----------------------

     All you need to do is submit the DecisionMaker1.cpp to our online
     judge.  The initial few days are only for testing and feedback
     for participants.  At the end of this period you will be asked to
     submit your final bot. For further details and latest updates,
     visit our webpage online.

     Our online judge can be found at

     www.exebit.org or
     www.cse.iitm.ac.in/exebit/site

                            ALL THE BEST!!

